#ifndef CBOPCODES_H
#define CBOPCODES_H
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include "memory.h"
#include "instructions.h"
#include "timer.h"

// Filling the opcode table
// ---------------------------------------------------
void CBOpcodes_init();

// Opcode Table
// ---------------------------------------------------
void (*CBOpcodes[0xFF + 1])(void);
void CBOpcode_not_implemented(uint8_t opcode);

void CBOpcode_decode(uint8_t opcode);

void CBOpcode_0x00(void);
void CBOpcode_0x01(void);
void CBOpcode_0x02(void);
void CBOpcode_0x03(void);
void CBOpcode_0x04(void);
void CBOpcode_0x05(void);
void CBOpcode_0x06(void);
void CBOpcode_0x07(void);
void CBOpcode_0x08(void);
void CBOpcode_0x09(void);
void CBOpcode_0x0A(void);
void CBOpcode_0x0B(void);
void CBOpcode_0x0C(void);
void CBOpcode_0x0D(void);
void CBOpcode_0x0E(void);
void CBOpcode_0x0F(void);
void CBOpcode_0x10(void);
void CBOpcode_0x11(void);
void CBOpcode_0x12(void);
void CBOpcode_0x13(void);
void CBOpcode_0x14(void);
void CBOpcode_0x15(void);
void CBOpcode_0x16(void);
void CBOpcode_0x17(void);
void CBOpcode_0x18(void);
void CBOpcode_0x19(void);
void CBOpcode_0x1A(void);
void CBOpcode_0x1B(void);
void CBOpcode_0x1C(void);
void CBOpcode_0x1D(void);
void CBOpcode_0x1E(void);
void CBOpcode_0x1F(void);
void CBOpcode_0x20(void);
void CBOpcode_0x21(void);
void CBOpcode_0x22(void);
void CBOpcode_0x23(void);
void CBOpcode_0x24(void);
void CBOpcode_0x25(void);
void CBOpcode_0x26(void);
void CBOpcode_0x27(void);
void CBOpcode_0x28(void);
void CBOpcode_0x29(void);
void CBOpcode_0x2A(void);
void CBOpcode_0x2B(void);
void CBOpcode_0x2C(void);
void CBOpcode_0x2D(void);
void CBOpcode_0x2E(void);
void CBOpcode_0x2F(void);
void CBOpcode_0x30(void);
void CBOpcode_0x31(void);
void CBOpcode_0x32(void);
void CBOpcode_0x33(void);
void CBOpcode_0x34(void);
void CBOpcode_0x35(void);
void CBOpcode_0x36(void);
void CBOpcode_0x37(void);
void CBOpcode_0x38(void);
void CBOpcode_0x39(void);
void CBOpcode_0x3A(void);
void CBOpcode_0x3B(void);
void CBOpcode_0x3C(void);
void CBOpcode_0x3D(void);
void CBOpcode_0x3E(void);
void CBOpcode_0x3F(void);
void CBOpcode_0x40(void);
void CBOpcode_0x41(void);
void CBOpcode_0x42(void);
void CBOpcode_0x43(void);
void CBOpcode_0x44(void);
void CBOpcode_0x45(void);
void CBOpcode_0x46(void);
void CBOpcode_0x47(void);
void CBOpcode_0x48(void);
void CBOpcode_0x49(void);
void CBOpcode_0x4A(void);
void CBOpcode_0x4B(void);
void CBOpcode_0x4C(void);
void CBOpcode_0x4D(void);
void CBOpcode_0x4E(void);
void CBOpcode_0x4F(void);
void CBOpcode_0x50(void);
void CBOpcode_0x51(void);
void CBOpcode_0x52(void);
void CBOpcode_0x53(void);
void CBOpcode_0x54(void);
void CBOpcode_0x55(void);
void CBOpcode_0x56(void);
void CBOpcode_0x57(void);
void CBOpcode_0x58(void);
void CBOpcode_0x59(void);
void CBOpcode_0x5A(void);
void CBOpcode_0x5B(void);
void CBOpcode_0x5C(void);
void CBOpcode_0x5D(void);
void CBOpcode_0x5E(void);
void CBOpcode_0x5F(void);
void CBOpcode_0x60(void);
void CBOpcode_0x61(void);
void CBOpcode_0x62(void);
void CBOpcode_0x63(void);
void CBOpcode_0x64(void);
void CBOpcode_0x65(void);
void CBOpcode_0x66(void);
void CBOpcode_0x67(void);
void CBOpcode_0x68(void);
void CBOpcode_0x69(void);
void CBOpcode_0x6A(void);
void CBOpcode_0x6B(void);
void CBOpcode_0x6C(void);
void CBOpcode_0x6D(void);
void CBOpcode_0x6E(void);
void CBOpcode_0x6F(void);
void CBOpcode_0x70(void);
void CBOpcode_0x71(void);
void CBOpcode_0x72(void);
void CBOpcode_0x73(void);
void CBOpcode_0x74(void);
void CBOpcode_0x75(void);
void CBOpcode_0x76(void);
void CBOpcode_0x77(void);
void CBOpcode_0x78(void);
void CBOpcode_0x79(void);
void CBOpcode_0x7A(void);
void CBOpcode_0x7B(void);
void CBOpcode_0x7C(void);
void CBOpcode_0x7D(void);
void CBOpcode_0x7E(void);
void CBOpcode_0x7F(void);
void CBOpcode_0x80(void);
void CBOpcode_0x81(void);
void CBOpcode_0x82(void);
void CBOpcode_0x83(void);
void CBOpcode_0x84(void);
void CBOpcode_0x85(void);
void CBOpcode_0x86(void);
void CBOpcode_0x87(void);
void CBOpcode_0x88(void);
void CBOpcode_0x89(void);
void CBOpcode_0x8A(void);
void CBOpcode_0x8B(void);
void CBOpcode_0x8C(void);
void CBOpcode_0x8D(void);
void CBOpcode_0x8E(void);
void CBOpcode_0x8F(void);
void CBOpcode_0x90(void);
void CBOpcode_0x91(void);
void CBOpcode_0x92(void);
void CBOpcode_0x93(void);
void CBOpcode_0x94(void);
void CBOpcode_0x95(void);
void CBOpcode_0x96(void);
void CBOpcode_0x97(void);
void CBOpcode_0x98(void);
void CBOpcode_0x99(void);
void CBOpcode_0x9A(void);
void CBOpcode_0x9B(void);
void CBOpcode_0x9C(void);
void CBOpcode_0x9D(void);
void CBOpcode_0x9E(void);
void CBOpcode_0x9F(void);
void CBOpcode_0xA0(void);
void CBOpcode_0xA1(void);
void CBOpcode_0xA2(void);
void CBOpcode_0xA3(void);
void CBOpcode_0xA4(void);
void CBOpcode_0xA5(void);
void CBOpcode_0xA6(void);
void CBOpcode_0xA7(void);
void CBOpcode_0xA8(void);
void CBOpcode_0xA9(void);
void CBOpcode_0xAA(void);
void CBOpcode_0xAB(void);
void CBOpcode_0xAC(void);
void CBOpcode_0xAD(void);
void CBOpcode_0xAE(void);
void CBOpcode_0xAF(void);
void CBOpcode_0xB0(void);
void CBOpcode_0xB1(void);
void CBOpcode_0xB2(void);
void CBOpcode_0xB3(void);
void CBOpcode_0xB4(void);
void CBOpcode_0xB5(void);
void CBOpcode_0xB6(void);
void CBOpcode_0xB7(void);
void CBOpcode_0xB8(void);
void CBOpcode_0xB9(void);
void CBOpcode_0xBA(void);
void CBOpcode_0xBB(void);
void CBOpcode_0xBC(void);
void CBOpcode_0xBD(void);
void CBOpcode_0xBE(void);
void CBOpcode_0xBF(void);
void CBOpcode_0xC0(void);
void CBOpcode_0xC1(void);
void CBOpcode_0xC2(void);
void CBOpcode_0xC3(void);
void CBOpcode_0xC4(void);
void CBOpcode_0xC5(void);
void CBOpcode_0xC6(void);
void CBOpcode_0xC7(void);
void CBOpcode_0xC8(void);
void CBOpcode_0xC9(void);
void CBOpcode_0xCA(void);
void CBOpcode_0xCB(void);
void CBOpcode_0xCC(void);
void CBOpcode_0xCD(void);
void CBOpcode_0xCE(void);
void CBOpcode_0xCF(void);
void CBOpcode_0xD0(void);
void CBOpcode_0xD1(void);
void CBOpcode_0xD2(void);
void CBOpcode_0xD3(void);
void CBOpcode_0xD4(void);
void CBOpcode_0xD5(void);
void CBOpcode_0xD6(void);
void CBOpcode_0xD7(void);
void CBOpcode_0xD8(void);
void CBOpcode_0xD9(void);
void CBOpcode_0xDA(void);
void CBOpcode_0xDB(void);
void CBOpcode_0xDC(void);
void CBOpcode_0xDD(void);
void CBOpcode_0xDE(void);
void CBOpcode_0xDF(void);
void CBOpcode_0xE0(void);
void CBOpcode_0xE1(void);
void CBOpcode_0xE2(void);
void CBOpcode_0xE3(void);
void CBOpcode_0xE4(void);
void CBOpcode_0xE5(void);
void CBOpcode_0xE6(void);
void CBOpcode_0xE7(void);
void CBOpcode_0xE8(void);
void CBOpcode_0xE9(void);
void CBOpcode_0xEA(void);
void CBOpcode_0xEB(void);
void CBOpcode_0xEC(void);
void CBOpcode_0xED(void);
void CBOpcode_0xEE(void);
void CBOpcode_0xEF(void);
void CBOpcode_0xF0(void);
void CBOpcode_0xF1(void);
void CBOpcode_0xF2(void);
void CBOpcode_0xF3(void);
void CBOpcode_0xF4(void);
void CBOpcode_0xF5(void);
void CBOpcode_0xF6(void);
void CBOpcode_0xF7(void);
void CBOpcode_0xF8(void);
void CBOpcode_0xF9(void);
void CBOpcode_0xFA(void);
void CBOpcode_0xFB(void);
void CBOpcode_0xFC(void);
void CBOpcode_0xFD(void);
void CBOpcode_0xFE(void);
void CBOpcode_0xFF(void);

#endif // CBOPCODES